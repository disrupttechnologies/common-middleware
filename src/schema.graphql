# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type BTCIncomingTransaction {
  amount: String!
  binanceTxnId: String!
  createdAt: DateTime!
  failedRemarks: String
  id: ID!
  senderAddress: String!
  settlementTxn: BTCSettlementTransaction
  txnHash: String!
  txnStatus: TxnStatus!
  txnTime: DateTime!
  updatedAt: DateTime!
  user: UserBTCAddress!
}

input BTCIncomingTransactionListRelationFilter {
  every: BTCIncomingTransactionWhereInput
  none: BTCIncomingTransactionWhereInput
  some: BTCIncomingTransactionWhereInput
}

input BTCIncomingTransactionRelationFilter {
  is: BTCIncomingTransactionWhereInput
  isNot: BTCIncomingTransactionWhereInput
}

input BTCIncomingTransactionWhereInput {
  AND: [BTCIncomingTransactionWhereInput!]
  NOT: [BTCIncomingTransactionWhereInput!]
  OR: [BTCIncomingTransactionWhereInput!]
  amount: StringFilter
  binanceTxnId: StringFilter
  createdAt: DateTimeFilter
  failedRemarks: StringNullableFilter
  id: StringFilter
  senderAddress: StringFilter
  settlementTxn: BTCSettlementTransactionNullableRelationFilter
  txnHash: StringFilter
  txnStatus: EnumTxnStatusFilter
  txnTime: DateTimeFilter
  updatedAt: DateTimeFilter
  user: UserBTCAddressRelationFilter
}

type BTCSettlementTransaction {
  amountReceivedInUSD: String
  createdAt: DateTime!
  failedRemarks: String
  id: ID!
  incomingTxn: BTCIncomingTransaction!
  incomingTxnId: String!
  orderId: String
  orderplaceTime: DateTime
  status: BTCTxnProcessStatus!
  updatedAt: DateTime!
}

input BTCSettlementTransactionNullableRelationFilter {
  is: BTCSettlementTransactionWhereInput
  isNot: BTCSettlementTransactionWhereInput
}

input BTCSettlementTransactionWhereInput {
  AND: [BTCSettlementTransactionWhereInput!]
  NOT: [BTCSettlementTransactionWhereInput!]
  OR: [BTCSettlementTransactionWhereInput!]
  amountReceivedInUSD: StringNullableFilter
  createdAt: DateTimeFilter
  failedRemarks: StringNullableFilter
  id: StringFilter
  incomingTxn: BTCIncomingTransactionRelationFilter
  incomingTxnId: StringFilter
  orderId: StringNullableFilter
  orderplaceTime: DateTimeNullableFilter
  status: EnumBTCTxnProcessStatusFilter
  updatedAt: DateTimeFilter
}

enum BTCTxnProcessStatus {
  FAILED
  NOT_INITIALIZED
  PENDING
  SUCCESS
}

input CreateKYCInput {
  """User Id"""
  userId: String!

  """User Metadata"""
  userMetadata: String!
}

input CreateKYCsInput {
  data: [CreateKYCInput!]!
}

input CreateTradeDataInput {
  amount: String!
  chainId: String!
  from: String!
  receiver: String!
  src: String!
}

input CreateUserBtcAddressInput {
  """BTC Address"""
  address: String!

  """User Id"""
  userId: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input EnumBTCTxnProcessStatusFilter {
  equals: BTCTxnProcessStatus
  in: [BTCTxnProcessStatus!]
  not: NestedEnumBTCTxnProcessStatusFilter
  notIn: [BTCTxnProcessStatus!]
}

input EnumKYCStageFilter {
  equals: KYCStage
  in: [KYCStage!]
  not: NestedEnumKYCStageFilter
  notIn: [KYCStage!]
}

input EnumKycStatusFilter {
  equals: KycStatus
  in: [KycStatus!]
  not: NestedEnumKycStatusFilter
  notIn: [KycStatus!]
}

input EnumTxnStatusFilter {
  equals: TxnStatus
  in: [TxnStatus!]
  not: NestedEnumTxnStatusFilter
  notIn: [TxnStatus!]
}

input GetKYCAccessTokenInput {
  userId: String!
}

type GetKYCAccessTokenInputResponse {
  token: String!
}

input GetKYCResponseInput {
  ids: [String!]!
}

type GetKYCResponses {
  data: [KYCResponse!]!
}

input GetUserBTCAddressInput {
  """User Id"""
  userId: String!
}

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

type KYCDetail {
  createdAt: DateTime!
  failedRemarks: String
  id: ID!
  kycApplicantId: String
  kycStage: KYCStage!
  kycStatus: KycStatus!
  updatedAt: DateTime!
  userId: String!
  userMetadata: String!
  whitelabelId: String!
}

input KYCDetailWhereInput {
  AND: [KYCDetailWhereInput!]
  NOT: [KYCDetailWhereInput!]
  OR: [KYCDetailWhereInput!]
  createdAt: DateTimeFilter
  failedRemarks: StringNullableFilter
  id: StringFilter
  kycApplicantId: StringNullableFilter
  kycStage: EnumKYCStageFilter
  kycStatus: EnumKycStatusFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
  userMetadata: StringFilter
  whitelabelId: StringFilter
}

type KYCResponse {
  kycStatus: KycStatus!
  userId: ID!
}

enum KYCStage {
  ID_CREATED
  NOT_INITIALIZED
  PASSPORT_UPLOADED
  REQUEST_CHECKED
  SELFIE_UPLOADED
}

enum KycStatus {
  FAILED
  NOT_INITIALIZED
  PENDING
  RETRY
  SUCCESS
}

input LoginInput {
  key: String!
  whitelabelId: String!
}

type Mutation {
  createKYC(data: CreateKYCsInput!): OkResponse!
  createTradeData(data: CreateTradeDataInput! = {}): TokenTradeResp!
  createUserBtcAddress(data: CreateUserBtcAddressInput!): OkResponse!
  login(data: LoginInput!): Token!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumBTCTxnProcessStatusFilter {
  equals: BTCTxnProcessStatus
  in: [BTCTxnProcessStatus!]
  not: NestedEnumBTCTxnProcessStatusFilter
  notIn: [BTCTxnProcessStatus!]
}

input NestedEnumKYCStageFilter {
  equals: KYCStage
  in: [KYCStage!]
  not: NestedEnumKYCStageFilter
  notIn: [KYCStage!]
}

input NestedEnumKycStatusFilter {
  equals: KycStatus
  in: [KycStatus!]
  not: NestedEnumKycStatusFilter
  notIn: [KycStatus!]
}

input NestedEnumTxnStatusFilter {
  equals: TxnStatus
  in: [TxnStatus!]
  not: NestedEnumTxnStatusFilter
  notIn: [TxnStatus!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type OkResponse {
  message: String!
}

type Query {
  getBTCTxns(where: BTCIncomingTransactionWhereInput! = {}): [BTCIncomingTransaction!]!
  getCryptoPrice: TokenPriceResp!
  getKYCAccessToken(data: GetKYCAccessTokenInput! = {}): GetKYCAccessTokenInputResponse!
  getKYCDetails(where: KYCDetailWhereInput! = {}): [KYCDetail!]!
  getKYCResponses(data: GetKYCResponseInput! = {}): GetKYCResponses!
  getUserAddresses(data: GetUserBTCAddressInput!): [UserBTCAddress!]!
}

enum QueryMode {
  default
  insensitive
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Token {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
}

type TokenPriceResp {
  prices: String!
}

type TokenTradeResp {
  data: String!
}

enum TxnStatus {
  ERROR
  PENDING
  SUCCESS
}

type UserBTCAddress {
  address: String!
  createdAt: DateTime!
  id: ID!
  txns: [BTCIncomingTransaction!]
  updatedAt: DateTime!
  userId: String!
  whitelabelId: String!
}

input UserBTCAddressRelationFilter {
  is: UserBTCAddressWhereInput
  isNot: UserBTCAddressWhereInput
}

input UserBTCAddressWhereInput {
  AND: [UserBTCAddressWhereInput!]
  NOT: [UserBTCAddressWhereInput!]
  OR: [UserBTCAddressWhereInput!]
  address: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  txns: BTCIncomingTransactionListRelationFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
  whitelabelId: StringFilter
}