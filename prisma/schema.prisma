datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

generator nestgraphql {
  provider           = "node node_modules/prisma-nestjs-graphql"
  output             = "../src/@generated"
  omitModelsCount    = true
  noAtomicOperations = true
}

model KYCDetail {
  id             String    @id @default(cuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  userId         String    @unique
  kycStatus      KycStatus @default(NOT_INITIALIZED)
  failedRemarks  String?
  userMetadata   String
  whitelabelId   String
  kycApplicantId String?   @unique
  kycStage       KYCStage  @default(NOT_INITIALIZED)
}

model SyncDetails {
  id           String   @id @default(cuid())
  lastSyncedAt DateTime
  actionName   String   @unique
  metadata     String?
}

model UserBTCAddress {
  id           String                   @id @default(cuid())
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  address      String                   @unique
  userId       String
  whitelabelId String
  txns         BTCIncomingTransaction[]
}

model BTCSettlementTransaction {
  id                  String                 @id @default(cuid())
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  incomingTxnId       String                 @unique
  incomingTxn         BTCIncomingTransaction @relation(fields: [incomingTxnId], references: [id])
  orderId             String?                @unique
  orderplaceTime      DateTime?
  amountReceivedInUSD String?
  status              BTCTxnProcessStatus    @default(NOT_INITIALIZED)
  failedRemarks       String?
}

model BTCIncomingTransaction {
  id            String                    @id @default(cuid())
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  txnHash       String                    @unique
  binanceTxnId  String                    @unique
  txnTime       DateTime
  amount        String
  senderAddress String
  settlementTxn BTCSettlementTransaction?
  user          UserBTCAddress            @relation(fields: [senderAddress], references: [address])
  txnStatus     TxnStatus
  failedRemarks String?
}

model KYCUser {
  id             String    @id @default(cuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  userId         String    @unique
  whitelabelId   String
  kycApplicantId String?   @unique
  kycStatus      KycStatus @default(NOT_INITIALIZED)
  inspectionId   String?   @unique
  kycData        String?
  metadata       String?
}



model WhitelabelIncomingTransaction {
  id                    String              @id @default(cuid())
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  userId                String
  whitelabelId          String
  provisionTxnHash      String              @unique
  settlementTransactionId String? @unique
  settlementTransaction BinanceIncomingTxn? @relation(fields: [settlementTransactionId], references: [id])
}


model BinanceIncomingTxn {
  id                            String                         @id @default(cuid())
  createdAt                     DateTime                       @default(now())
  updatedAt                     DateTime                       @updatedAt
  paidCurrency                  String
  amountInPaidCurrency          String
  network                       String
  txnHash                       String                         @unique
  senderAddress                 String
  binanceTxnId                  String                         @unique
  status                        IncomingTxnStatus?             @default(PAYMENT_RECEIVED)
  settlementTransactionId       String?                        @unique
  settlementTransaction         SettlementTransaction?         @relation(fields: [settlementTransactionId], references: [id])
  whitelabelIncomingTransaction WhitelabelIncomingTransaction?
  failedRemarks  String?

}



model SettlementTransaction {
  id             String                             @id @default(cuid())
  createdAt      DateTime                           @default(now())
  updatedAt      DateTime                           @updatedAt
  orderId        String?                            @unique
  orderplaceTime DateTime?
  amountReceived String?
  status         SettlementTransactionProcessStatus @default(NOT_INITIALIZED)
  incomingTxn    BinanceIncomingTxn?
}

enum SettlementTransactionProcessStatus {
  NOT_INITIALIZED
  PENDING
  SUCCESS
  FAILED
}

enum IncomingTxnStatus {
  PAYMENT_RECEIVED
  SETTLEMENT_INITIALZED
  COMPLETED
  FAILED
}

enum SolIncomingTxnStatus {
  NOT_INITIALIZED
  RECEIVED
  CONVERSION_PROCESSING
  FAILED
  SUCCESS
}

enum Network {
  BTC
  SOL
  BSC
  ETH
  TRC
  POL
}

enum TxnStatus {
  // NOT_INITIALIZED
  PENDING
  SUCCESS
  ERROR
}

enum BTCTxnProcessStatus {
  NOT_INITIALIZED
  PENDING
  SUCCESS
  FAILED
}

enum KycStatus {
  NOT_INITIALIZED
  PENDING
  FAILED
  RETRY
  SUCCESS
}

enum KYCStage {
  NOT_INITIALIZED
  ID_CREATED
  PASSPORT_UPLOADED
  SELFIE_UPLOADED
  REQUEST_CHECKED
}
